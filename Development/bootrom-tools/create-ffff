#! /usr/bin/python

#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from __future__ import print_function
import sys
import argparse
from ffff_romimage import FfffRomimage
from ffff_element import FFFF_ELEMENT_STAGE2_FIRMWARE_PACKAGE, \
    FFFF_ELEMENT_STAGE3_FIRMWARE_PACKAGE, FFFF_ELEMENT_IMS_CERTIFICATE, \
    FFFF_ELEMENT_CMS_CERTIFICATE, FFFF_ELEMENT_DATA, FFFF_HDR_NUM_ELEMENTS, \
    FFFF_HEADER_SIZE_MIN, FFFF_HEADER_SIZE_MAX, FFFF_HEADER_SIZE_DEFAULT

from ffff import get_header_block_size
from util import error, block_aligned, PROGRAM_ERRORS

# The current element being parsed.
# Element layout: [type, filename, class, ID, gen, loc, len].
current_element = []
INDEX_CE_TYPE = 0
INDEX_CE_FILE = 1
INDEX_CE_ECLASS = 2
INDEX_CE_EID = 3
INDEX_CE_EGEN = 4
INDEX_CE_ELOC = 5
INDEX_CE_ELEN = 6

# Parameter-checking constants
# TODO: update these with more plausible values
FLASH_MIN_SIZE = 32*1024
FLASH_MIN_BLOCK_SIZE = 512
FLASH_SANITY_MASK = 0x07ff


# The list of element descriptions, assembled by the parser (current_element
# is appended when done)
elements = []


def flush_current_element():
    # Flush the current element to the elements list if the current element is
    # not empty
    global current_element
    if current_element:
        # flush the current element out to the list.
        elements.append(current_element)
        current_element = []


def auto_int(x):
    # Workaround to allow hex numbers to be entered for numeric arguments.
    return int(x, 0)


class ElementAction(argparse.Action):
    """argparse custom action for handling elements and subparameters"""

    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(ElementAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        global current_element, elements
        # Handle the element suboptions (valid only if we have an un-flushed
        # element)
        if option_string in ["--eid", "--egen", "--eloc", "--elen",
                             "--eclass"]:
            if len(current_element) > 0:
                # Update the appropriate field in current element
                if option_string == "--eid":
                    current_element[INDEX_CE_EID] = values
                elif option_string == "--egen":
                    current_element[INDEX_CE_EGEN] = values
                elif option_string == "--eloc":
                    current_element[INDEX_CE_ELOC] = values
                elif option_string == "--elen":
                    current_element[INDEX_CE_ELEN] = values
                else:
                    current_element[INDEX_CE_ECLASS] = values
            else:
                error("Error: ", option_string, " can only follow an element")
        else:
            if len(current_element) > 0:
                # flush the current element out to the list.
                elements.append(current_element)
                current_element = []

            # Handle the specific element type
            if option_string == "--s2f":
                current_element = [FFFF_ELEMENT_STAGE2_FIRMWARE_PACKAGE,
                                   values, 0, 0, 0, 0, 0]
            elif option_string == "--s3f":
                current_element = [FFFF_ELEMENT_STAGE3_FIRMWARE_PACKAGE,
                                   values, 0, 0, 0, 0, 0]
            elif option_string == "--ims":
                current_element = [FFFF_ELEMENT_IMS_CERTIFICATE, values,
                                   0, 0, 0, 0, 0]
            elif option_string == "--cms":
                current_element = [FFFF_ELEMENT_CMS_CERTIFICATE, values,
                                   0, 0, 0, 0, 0]
            elif option_string == "--data":
                current_element = [FFFF_ELEMENT_DATA, values, 0, 0, 0, 0, 0]
            else:
                error("Unknown option '", option_string, "'")


def validate_block_arg(success, name, size, min_size):
    # Sanity-check the size of something ROM-ish, and return a "looks
    # plausible" flag. Note that it uses the input "success" as a starting
    # point and invalidates if the block arg doesn' pass muster. This allows
    # one to chain calls to validate_block_arg.
    if size == 0:
        # is value big enough?
        error(name, "is missing")
        success = False
    elif size < min_size:
        # is value big enough?
        error(name, "is too small")
        success = False
    elif size < 0 or size > 0xffffffff:
        # will value fit in a 32-bit number?
        error(name, "is out of range")
        success = False
    elif 0 != size & FLASH_SANITY_MASK:
        # is value some multiple of 2**n?
        error(name, "is suspect")
        success = False
    return success


def validate_args(args, elements):
    # Sanity-check the command line args and return a "valid" flag
    success = True

    # Valdate the header size
    if (args.header_size < FFFF_HEADER_SIZE_MIN) or \
       (args.header_size > FFFF_HEADER_SIZE_MAX):
        error("--header_size is out of range ({0:d}-{1:d})".
              format(FFFF_HEADER_SIZE_MIN, FFFF_HEADER_SIZE_MAX))
        success = False
    if (args.header_size % 4) != 0:
        error("--header_size must be a multiple of 4")
        success = False

    if not args.out:
        error("Missing --out file!")
        success = False

    if len(elements) == 0:
        error("You need at least one element!")
        success = False

    if len(elements) > FFFF_HDR_NUM_ELEMENTS:
        error("Too many elements -", FFFF_HDR_NUM_ELEMENTS, "max.")
        success = False

    success = validate_block_arg(success,
                                 "--flash-capacity",
                                 args.flash_capacity,
                                 FLASH_MIN_SIZE)

    success = validate_block_arg(success,
                                 "--erase-size",
                                 args.erase_size,
                                 FLASH_MIN_BLOCK_SIZE)

    if args.image_length == 0:
        error("you must specify --image-length")
        success = False
    elif args.image_length < 0 or args.image_length > 0xffffffff:
        error("--image-length is out of range")
        success = False

    if args.generation == 0:
        error("you must specify --generation")
        success = False
    elif args.generation < 1 or args.generation > 0xffffffff:
        error("--generation {0:d} is out of range".
              format(args.generation))
        success = False

    # Is the image length a multiple of the erase-block size?
    if not block_aligned(args.image_length, args.erase_size):
        error("--image-length is not a multiple of --erase-size value.")
        success = False

    # Is the element location aligned with the block size?
    for element in elements:
        element_location = element[INDEX_CE_ELOC]
        if not block_aligned(element_location, args.erase_size):
            error("--element-location is not a multiple of "
                  "--erase-size value.")
            success = False

        # Does the element location fall within twice the header-block size
        # and the image length?
        hdr_size_blocks = get_header_block_size(args.erase_size,
                                                args.header_size)
        if (element_location < (2 * hdr_size_blocks)) or \
           (element_location >= args.image_length):
            error("--element-location " + format(element_location, "#x") +
                  " outside the range of twice the header-block size " +
                  format(2 * hdr_size_blocks, "#x") +
                  " and the --image-length " +
                  format(args.image_length, "#x"))
            success = False

    # TODO: Other checks TBD

    return success


def main():
    """Application for creating Flash Format for Firmware (FFFF) files

    This is covered in detail in "ES3 Bridge ASIC Boot ROM High Level Design".

    Usage: create-ffff --fc <num> --ebs <num> --length <num> --gen <num> \
           --out <file> {--name <string>} {-v | --verbose} {--map} \
           {--header-size <num>} \
           [<element_type> <file> <element_option>]...
    Where:
        --fc | --flash-capacity
            The capacity of the Flash drive, in bytes.
        --ebs | --erase-size
            The erase block granularity, in bytes
        --length | --image-length
            The size of the image, in bytes
        --gen | --generation
            The header generation number (must be bigger than what is
            on the Flash).
        --out
            Specifies the output file
        --header-size
            The size of the generated FFFF header, in bytes (4096)
        --name
            Flash image name
        -v | --verbose
            Display the FFFF header and a synopsis of each FFFF section
        --map
            Create a map file of the FFFF headers and each FFFF sections
        <element_type>
            Specifies a file for a given type of element:
            --s2f | --stage-2-fw
                Stage 2 Firmware file
            --s3f | --stage-3-fw
                Stage 3 Firmware file
            --ims
                IMS certificate file
            --cms
                CMS certificate file.
            --data
                Generic data file.
        <element_option>
            Modifiers that can be applied to individual options:
            --eclass, --element-class
                The element's ID number.
            --eid, --element-id
                The element's ID number.
            --egen, --element-generation
                The element's generation number.
            --eloc, --element-location
                The element's absolute location in Flash (must be a multiple
                of --erase-size).
            --elen, --element-length
                (Optional) The element's length. If ommitted, the length is
                extracted from the file.
    """
    global current_element, elements
    parser = argparse.ArgumentParser()

    # args that consume files
    parser.add_argument("--s2f", "--stage-2-fw",
                        action=ElementAction,
                        help="The name of a Stage 2 Firmware file")

    parser.add_argument("--s3f", "--stage-3-fw",
                        action=ElementAction,
                        help="The name of a Stage 3 Firmware file")

    parser.add_argument("--ims",
                        action=ElementAction,
                        help="The name of an IMS certificate file")

    parser.add_argument("--cms",
                        action=ElementAction,
                        help="The name of an input CMS certificate file")

    parser.add_argument("--data",
                        action=ElementAction,
                        help="The name of a data file")

    # subarguments to the above
    parser.add_argument("--eclass", "--element-class",
                        action=ElementAction,
                        type=auto_int,
                        help="The class of the preceding element")

    parser.add_argument("--eid", "--element-id",
                        action=ElementAction,
                        type=auto_int,
                        help="The ID number of the preceding element")

    parser.add_argument("--egen", "--element-generation",
                        action=ElementAction,
                        type=auto_int,
                        help="The generation number of the preceding element")

    parser.add_argument("--eloc", "--element-location",
                        action=ElementAction,
                        type=auto_int,
                        help="The location of the preceding element")

    parser.add_argument("--elen", "--element-length",
                        action=ElementAction,
                        type=auto_int,
                        help="The length of the preceding element")

    # Flags args
    parser.add_argument("-v", "--verbose",
                        action='store_true',
                        help="Dump the FFFF header when done")

    parser.add_argument("--map", "-m",
                        action='store_true',
                        help="displays the field offsets")

    # String/file args
    parser.add_argument("--name",
                        help="The firmware package name")

    parser.add_argument("--out",
                        help="The FFFF output filename")

    # Numeric args
    parser.add_argument("--flash-capacity", "--fc",
                        type=auto_int,
                        default=0,
                        help="The capacity of the Flash drive (in bytes)")

    parser.add_argument("--erase-size", "--ebs",
                        type=auto_int,
                        default=0,
                        help="The erase block granularity (in bytes)")

    parser.add_argument("--image-length", "--length",
                        type=auto_int,
                        default=0,
                        help="The size of the image (in bytes)")

    parser.add_argument("--generation", "--gen",
                        type=auto_int,
                        default=0,
                        help="The header generation number")

    parser.add_argument("--header-size",
                        type=auto_int,
                        default=FFFF_HEADER_SIZE_DEFAULT,
                        help="The size of the generated FFFF header, "
                             "in bytes (4096)")

    args = parser.parse_args()

    # Flush any dangling element definition out to the element list.
    flush_current_element()

    # Sanity-check the arguments
    if not validate_args(args, elements):
        error("invalid args")
        sys.exit(PROGRAM_ERRORS)

    # Populate the FFFF header from the command line args
    ffff_romimage = FfffRomimage()
    if not ffff_romimage.init(args.name, args.flash_capacity,
                              args.erase_size, args.image_length,
                              args.generation, args.header_size):
        error("Could not populate FFFF header from args")
        sys.exit(PROGRAM_ERRORS)

    # Add in all of the elements
    for element in elements:
        if not ffff_romimage.add_element(element[INDEX_CE_TYPE],
                                         element[INDEX_CE_ECLASS],
                                         element[INDEX_CE_EID],
                                         element[INDEX_CE_ELEN],
                                         element[INDEX_CE_ELOC],
                                         element[INDEX_CE_EGEN],
                                         element[INDEX_CE_FILE]):
            error("unable to add", element[INDEX_CE_FILE])
            sys.exit(PROGRAM_ERRORS)

    # Make the FFFF header internally consistent
    ffff_romimage.post_process()

    # Write the FFFF file (i.e., header and element files
    if not ffff_romimage.write(args.out):
        error("Errors writing FFFF file:")
        ffff_romimage.display(args.out)
        error("Writing FFFF file failed.")
        sys.exit(PROGRAM_ERRORS)

    # Optionally display the header info
    if args.verbose:
        ffff_romimage.display(args.out)
    if args.map:
        ffff_romimage.create_map_file(args.out, 0)

    print("done")


## Launch main
#
if __name__ == '__main__':
    main()
